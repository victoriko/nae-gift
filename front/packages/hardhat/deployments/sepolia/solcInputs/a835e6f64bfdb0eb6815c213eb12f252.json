{
  "language": "Solidity",
  "sources": {
    "contracts/Escrow.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\ncontract Escrow {\r\n    enum ContractChoices{\r\n        ACTIVE,\r\n        FULFILLED,\r\n        EXECUTED\r\n    }\r\n\r\n    struct EscrowData{\r\n        address buyer;\r\n        address seller;\r\n        address receiver;\r\n        address market;\r\n        uint256 contractPrice;\r\n        ContractChoices State;\r\n        }\r\n\r\n    mapping(string => EscrowData) public escrows;\r\n\r\n    event EscrowCreated(string uuid);\r\n    event FulfillmentConfirmed(string uuid, address indexed market);\r\n    event ProductUsedConfirmed(string uuid, address indexed receiver);\r\n    event FundsDistributed(string uuid, address indexed market, uint256 marketShare, address indexed seller, uint256 sellerShare);\r\n\r\n    function createEscrow(\r\n        string memory uuid,\r\n        address _buyer,\r\n        address _seller,\r\n        address _receiver,\r\n        address _market,\r\n        uint256 _contractPrice\r\n    ) public payable{\r\n        require(msg.value >= _contractPrice, \"e002\");\r\n        require(msg.sender == _buyer, \"e003\");\r\n        require(escrows[uuid].buyer == address(0), \"escrow already\");\r\n\r\n        escrows[uuid]=EscrowData({\r\n            buyer: _buyer,\r\n            seller: _seller,\r\n            receiver: _receiver,\r\n            market: _market,\r\n            contractPrice: _contractPrice,\r\n            State: ContractChoices.ACTIVE\r\n        });\r\n\r\n        emit EscrowCreated(uuid);\r\n    }\r\n\r\n    function ConfirmFulfillment(string memory uuid)public{\r\n        require(msg.sender == escrows[uuid].market, \"e020\");\r\n        require(escrows[uuid].State == ContractChoices.ACTIVE, \"e004\");\r\n        escrows[uuid].State = ContractChoices.FULFILLED;\r\n        emit FulfillmentConfirmed(uuid, escrows[uuid].market);\r\n    }\r\n\r\n    function ConfirmProductUsed(string memory uuid) public{\r\n        require(msg.sender == escrows[uuid].market, \"e020\");\r\n        require(escrows[uuid].State == ContractChoices.FULFILLED, \"e005\");\r\n        escrows[uuid].State = ContractChoices.EXECUTED;\r\n        emit ProductUsedConfirmed(uuid, escrows[uuid].receiver);\r\n        DistributeFunds(uuid);\r\n    }\r\n\r\n    function DistributeFunds(string memory uuid) public{\r\n        require(escrows[uuid].State == ContractChoices.EXECUTED, \"e006\");\r\n        EscrowData storage escrow = escrows[uuid];\r\n        uint256 marketShare = escrow.contractPrice /10;\r\n        uint256 sellerShare = escrow.contractPrice - marketShare;\r\n        payable(escrow.market).transfer(marketShare);\r\n        payable(escrow.seller).transfer(sellerShare);\r\n        emit FundsDistributed(uuid, escrow.market, marketShare, escrow.seller, sellerShare);\r\n        }\r\n\r\n    function escrowStatus(string memory uuid) public view returns(ContractChoices){\r\n        return escrows[uuid].State;\r\n    }\r\n\r\n    receive() external payable{}\r\n}"
    },
    "contracts/EscrowProxy.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"./Escrow.sol\";\r\n\r\ncontract EscrowProxy {\r\n    address public latestEscrow;\r\n    address public escrowImplementation;\r\n\r\n    event escrowImplementationUpdated(address newImplementation);\r\n\r\n    constructor(address _escrowImplementation) {\r\n        updateescrowImplementation(_escrowImplementation);\r\n    }\r\n\r\n    function updateescrowImplementation(address _newescrowImplementation) public {\r\n        escrowImplementation = _newescrowImplementation;\r\n        emit escrowImplementationUpdated(_newescrowImplementation);\r\n    }\r\n\r\n    fallback() external payable {\r\n        _delegate(escrowImplementation);\r\n    }\r\n\r\n    receive() external payable {\r\n        _delegate(escrowImplementation);\r\n    }\r\n\r\n    function _delegate(address _implementation) internal {\r\n        require(_implementation != address(0), \"Implementation address is not set\");\r\n        assembly {\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            let result := delegatecall(gas(), _implementation, 0, calldatasize(), 0, 0)\r\n\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n            case 0 { revert(0, returndatasize()) }\r\n            default { return(0, returndatasize()) }\r\n        }\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}